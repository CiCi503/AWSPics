---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS stack to run a serverless password-protected photo gallery

Parameters:
  loginAPIDomain:
    Description: Login API Domain
    Type: String
  originAccessIdentity:
    Description: CloudFront OAI
    Type: String
  website:
    Description: Actual website
    Type: String
  websiteDomain:
    Description: Website domain
    Type: String
  sessionDuration:
    Description: Number of seconds the user has access to the file
    Type: Number
  redirectOnSuccess:
    Description: Whether to send a HTTP 200 or 302 on successful login (boolean)
    Type: String
  kmsKeyId:
    Description: ID of the KMS key used to encrypt other parameters
    Type: String
    NoEcho: true
  cloudFrontKeypairId:
    Description: CloudFront keypair ID encrypted with KMS
    Type: String
    Default: ''
    NoEcho: true
  encryptedCloudFrontPrivateKey:
    Description: CloudFront private key encrypted with KMS
    Type: String
    NoEcho: true
  encryptedHtpasswd:
    Description: htpasswd file contents encrypted with KMS
    Type: String
    NoEcho: true

Resources:

  #
  # Login Lambda function definition
  #
  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs4.3
      CodeUri: dist/lambda.zip
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          WEBSITE_DOMAIN: !Ref websiteDomain
          SESSION_DURATION: !Ref sessionDuration
          REDIRECT_ON_SUCCESS: !Ref redirectOnSuccess
          CLOUDFRONT_KEYPAIR_ID: !Ref cloudFrontKeypairId
          ENCRYPTED_CLOUDFRONT_PRIVATE_KEY: !Ref encryptedCloudFrontPrivateKey
          ENCRYPTED_HTPASSWD: !Ref encryptedHtpasswd
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /login
            Method: post

  #
  # Login IAM role so the Lambda can log (CloudWatch) and decrypt secrets (KMS)
  #
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowLambdaServiceToAssumeRole
            Effect: Allow
            Action: ['sts:AssumeRole']
            Principal:
              Service: [lambda.amazonaws.com]
      Policies:
        - PolicyName: KmsDecrypt
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource: !Sub
                  - arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${id}
                  - id: !Ref kmsKeyId
                Action: ['kms:Decrypt']

  #
  # Resize Lambda function definition
  #
  ResizeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs6.10
      CodeUri: dist/lambda-resize.zip
      Role: !GetAtt ResizeLambdaRole.Arn
      Timeout: 30
      MemorySize: 1024

  #
  # Resize IAM role so the Lambda can log (CloudWatch) and read/write S3 objects
  #
  ResizeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowLambdaServiceToAssumeRole
            Effect: Allow
            Action: ['sts:AssumeRole']
            Principal:
              Service: [lambda.amazonaws.com]
      Policies:
        - PolicyName: ResizeLambdaGetOriginal
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource: !Sub
                  - 'arn:aws:s3:::${websiteDomain}-original/*'
                  - websiteDomain: !Ref websiteDomain
                Action: ['s3:GetObject']
        - PolicyName: ResizeLambdaPutResized
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource: !Sub
                  - 'arn:aws:s3:::${websiteDomain}-resized/*'
                  - websiteDomain: !Ref websiteDomain
                Action: ['s3:PutObject']

  #
  # Site Builder Lambda function definition
  #
  SiteBuilderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs6.10
      CodeUri: dist/lambda-site-builder.zip
      Environment:
        Variables:
          CLOUDFRONT_DISTRIBUTION_DOMAIN:
            !GetAtt ProtectedPicturesDistribution.DomainName
          ORIGINAL_BUCKET: !Sub
            - ${websiteDomain}-original
            - websiteDomain: !Ref websiteDomain
          SITE_BUCKET: !Ref websiteDomain
          WEBSITE: !Ref website
      Role: !GetAtt SiteBuilderLambdaRole.Arn
      Timeout: 30
      MemorySize: 1024

  #
  # Site Builder IAM role so the Lambda can log (CloudWatch) and read/write S3 objects
  #
  SiteBuilderLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowLambdaServiceToAssumeRole
            Effect: Allow
            Action: ['sts:AssumeRole']
            Principal:
              Service: [lambda.amazonaws.com]
      Policies:
        - PolicyName: SiteBuilderLambdaGetOriginal
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource: !Sub
                  - 'arn:aws:s3:::${websiteDomain}-original/*'
                  - websiteDomain: !Ref websiteDomain
                Action: ['s3:GetObject']
        - PolicyName: SiteBuilderLambdaListOriginal
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource: !Sub
                  - 'arn:aws:s3:::${websiteDomain}-original'
                  - websiteDomain: !Ref websiteDomain
                Action: ['s3:ListBucket']
        - PolicyName: SiteBuilderLambdaPutSite
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource: !Sub
                  - 'arn:aws:s3:::${websiteDomain}/*'
                  - websiteDomain: !Ref websiteDomain
                Action: ['s3:PutObject']
        - PolicyName: SiteBuilderLambdaInvalidateDistribution
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource: '*'
                Action:
                  - cloudfront:CreateInvalidation
                  - cloudfront:ListDistributions

  #
  # Original Bucket
  #
  ResizeInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ResizeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub
        - arn:aws:s3:::${websiteDomain}-original
        - websiteDomain: !Ref websiteDomain
  OriginalBucket:
    Type: AWS::S3::Bucket
    DependsOn: ResizeInvokePermission
    Properties:
      BucketName: !Sub
        - ${websiteDomain}-original
        - websiteDomain: !Ref websiteDomain
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt ResizeFunction.Arn
  OriginalBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: OriginalBucket
    Properties:
      Bucket: !Ref OriginalBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub
              - '${bucket}/*'
              - bucket: !GetAtt OriginalBucket.Arn
            Principal:
              AWS: !Sub
                - arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${id}
                - id: !Ref originAccessIdentity

  #
  # Resized Bucket
  #
  SiteBuilderInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SiteBuilderFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub
        - arn:aws:s3:::${websiteDomain}-resized
        - websiteDomain: !Ref websiteDomain
  ResizedBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub
        - ${websiteDomain}-resized
        - websiteDomain: !Ref websiteDomain
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt SiteBuilderFunction.Arn
  ResizedBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: ResizedBucket
    Properties:
      Bucket: !Ref ResizedBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub
              - '${bucket}/*'
              - bucket: !GetAtt ResizedBucket.Arn
            Principal:
              AWS: !Sub
                - arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${id}
                - id: !Ref originAccessIdentity

  #
  # Web Bucket
  #
  WebBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref websiteDomain
  WebBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: WebBucket
    Properties:
      Bucket: !Ref WebBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub
              - '${bucket}/*'
              - bucket: !GetAtt WebBucket.Arn
            Principal:
              AWS: !Sub
                - arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${id}
                - id: !Ref originAccessIdentity

  #
  # CloudFront Distribution
  #
  ProtectedPicturesDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref website
        Origins:
          - DomainName: !Sub
              - ${websiteDomain}-resized.s3.amazonaws.com
              - websiteDomain: !Ref websiteDomain
            Id: !Sub
              - S3-${websiteDomain}-resized
              - websiteDomain: !Ref websiteDomain
            S3OriginConfig:
              OriginAccessIdentity: !Sub
                - origin-access-identity/cloudfront/${id}
                - id: !Ref originAccessIdentity
          - DomainName: !Sub
              - ${websiteDomain}-original.s3.amazonaws.com
              - websiteDomain: !Ref websiteDomain
            Id: !Sub
              - S3-${websiteDomain}-original
              - websiteDomain: !Ref websiteDomain
            S3OriginConfig:
              OriginAccessIdentity: !Sub
                - origin-access-identity/cloudfront/${id}
                - id: !Ref originAccessIdentity
          - DomainName: !Sub
              - ${websiteDomain}.s3.amazonaws.com
              - websiteDomain: !Ref websiteDomain
            Id: !Sub
              - S3-${websiteDomain}
              - websiteDomain: !Ref websiteDomain
            S3OriginConfig:
              OriginAccessIdentity: !Sub
                - origin-access-identity/cloudfront/${id}
                - id: !Ref originAccessIdentity
          - DomainName: !Ref loginAPIDomain
            Id: !Sub
              - Custom-${loginAPIDomain}
              - loginAPIDomain: !Ref loginAPIDomain
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
        CacheBehaviors:
          - TargetOriginId: !Sub
              - S3-${websiteDomain}-resized
              - websiteDomain: !Ref websiteDomain
            ViewerProtocolPolicy: https-only
            PathPattern: 'pics/resized/*'
            ForwardedValues:
              QueryString: 'false'
          - TargetOriginId: !Sub
              - S3-${websiteDomain}-original
              - websiteDomain: !Ref websiteDomain
            ViewerProtocolPolicy: https-only
            PathPattern: 'pics/original/*'
            ForwardedValues:
              QueryString: 'false'
          - TargetOriginId: !Sub
              - Custom-${loginAPIDomain}
              - loginAPIDomain: !Ref loginAPIDomain
            ViewerProtocolPolicy: https-only
            PathPattern: 'Prod/*'
            AllowedMethods:
              - HEAD
              - DELETE
              - POST
              - GET
              - OPTIONS
              - PUT
              - PATCH
            ForwardedValues:
              QueryString: 'false'
              Headers:
                - Accept
                - Authorization
                - Content-Type
                - Referer
        Enabled: 'true'
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: !Sub
            - S3-${websiteDomain}
            - websiteDomain: !Ref websiteDomain
          ForwardedValues:
            QueryString: 'false'
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:382210734147:certificate/b41faaf8-4719-4f95-8aaf-639b0cc3fb5a
          SslSupportMethod: sni-only
